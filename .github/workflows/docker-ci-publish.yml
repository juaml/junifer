name: Docker for CI

on:
  push:
    branches: [ "main" ]
    paths: [ "Dockerfile-ci" ]
  pull_request:
    branches: [ "main" ]
    paths: [ "Dockerfile-ci" ]
  workflow_dispatch: {}

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}-ci

jobs:
  build:
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - run: df -h
      - name: Clean runner
        run: |
          sudo rm -rf /usr/share/dotnet \
                 /usr/local/lib/android \
                 /opt/ghc \
                 /opt/hostedtoolcache
          sudo docker image prune --all --force
          sudo docker builder prune -a
      - run: df -h
      - name: Checkout repository
        uses: actions/checkout@v5
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3.10.0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.1
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3.5.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5.8.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v6.18.0
        with:
          context: .
          file: Dockerfile-ci
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
