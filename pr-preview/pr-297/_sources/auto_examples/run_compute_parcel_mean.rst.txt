
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/run_compute_parcel_mean.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_run_compute_parcel_mean.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_run_compute_parcel_mean.py:


Computer Parcel Aggregation.
============================

This example uses the ``ParcelAggregation`` marker to compute the mean of each
parcel using the Schaefer parcellations (100 rois, 7 Yeo networks) for both 3D
and 4D NIfTI.

Authors: Federico Raimondo, Synchon Mandal

License: BSD 3 clause

.. GENERATED FROM PYTHON SOURCE LINES 13-23

.. code-block:: default


    from junifer.testing.datagrabbers import (
        OasisVBMTestingDataGrabber,
        SPMAuditoryTestingDataGrabber,
    )
    from junifer.datareader import DefaultDataReader
    from junifer.markers import ParcelAggregation
    from junifer.utils import configure_logging









.. GENERATED FROM PYTHON SOURCE LINES 24-25

Set the logging level to info to see extra information

.. GENERATED FROM PYTHON SOURCE LINES 25-27

.. code-block:: default

    configure_logging(level="INFO")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2024-01-31 05:44:29,000 - JUNIFER - INFO - ===== Lib Versions =====
    2024-01-31 05:44:29,000 - JUNIFER - INFO - numpy: 1.26.3
    2024-01-31 05:44:29,000 - JUNIFER - INFO - scipy: 1.11.4
    2024-01-31 05:44:29,000 - JUNIFER - INFO - pandas: 2.1.4
    2024-01-31 05:44:29,000 - JUNIFER - INFO - nilearn: 0.10.2
    2024-01-31 05:44:29,000 - JUNIFER - INFO - nibabel: 5.2.0
    2024-01-31 05:44:29,000 - JUNIFER - INFO - junifer: 0.0.4.dev542
    2024-01-31 05:44:29,000 - JUNIFER - INFO - ========================




.. GENERATED FROM PYTHON SOURCE LINES 28-29

Perform parcel aggregation on VBM GM data (3D) from OASIS dataset

.. GENERATED FROM PYTHON SOURCE LINES 29-42

.. code-block:: default

    with OasisVBMTestingDataGrabber() as dg:
        # Get the first element
        element = dg.get_elements()[0]
        # Read the element
        element_data = DefaultDataReader().fit_transform(dg[element])
        # Initialize marker
        marker = ParcelAggregation(parcellation="Schaefer100x7", method="mean")
        # Compute feature
        feature = marker.fit_transform(element_data)
        # Print the output
        print(feature.keys())
        print(feature["VBM_GM"]["data"].shape)  # Shape is (1 x parcels)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/nilearn/datasets/struct.py:852: UserWarning: `legacy_format` will default to `False` in release 0.11. Dataset fetchers will then return pandas dataframes by default instead of recarrays.
      warnings.warn(_LEGACY_FORMAT_MSG)
    2024-01-31 05:44:29,006 - JUNIFER - INFO - Getting element sub-01
    2024-01-31 05:44:29,006 - JUNIFER - INFO - Reading VBM_GM from /home/runner/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    2024-01-31 05:44:29,006 - JUNIFER - INFO - VBM_GM is type NIFTI
    2024-01-31 05:44:29,007 - JUNIFER - INFO - Computing VBM_GM
    2024-01-31 05:44:29,007 - JUNIFER - INFO - Fetching one of Schaefer parcellations.
    2024-01-31 05:44:29,007 - JUNIFER - INFO - Parcellation parameters:
    2024-01-31 05:44:29,007 - JUNIFER - INFO -      resolution: 2.0
    2024-01-31 05:44:29,007 - JUNIFER - INFO -      n_rois: 100
    2024-01-31 05:44:29,007 - JUNIFER - INFO -      yeo_networks: 7
    2024-01-31 05:44:29,007 - JUNIFER - INFO - At least one of the parcellation files are missing. Fetching using nilearn.
    Downloading data from https://raw.githubusercontent.com/ThomasYeoLab/CBIG/v0.14.3-Update_Yeo2011_Schaefer2018_labelname/stable_projects/brain_parcellation/Schaefer2018_LocalGlobal/Parcellations/MNI/Schaefer2018_100Parcels_7Networks_order.txt ...
     ...done. (0 seconds, 0 min)
    Downloading data from https://raw.githubusercontent.com/ThomasYeoLab/CBIG/v0.14.3-Update_Yeo2011_Schaefer2018_labelname/stable_projects/brain_parcellation/Schaefer2018_LocalGlobal/Parcellations/MNI/Schaefer2018_100Parcels_7Networks_order_FSLMNI152_2mm.nii.gz ...
     ...done. (0 seconds, 0 min)
    2024-01-31 05:44:29,226 - JUNIFER - INFO - Loading parcellation /home/runner/junifer/data/parcellations/schaefer_2018/Schaefer2018_100Parcels_7Networks_order_FSLMNI152_2mm.nii.gz
    2024-01-31 05:44:29,865 - JUNIFER - INFO - No storage specified, returning dictionary
    dict_keys(['VBM_GM'])
    (1, 100)




.. GENERATED FROM PYTHON SOURCE LINES 43-44

Perform parcel aggregation on BOLD data (4D) from SPM Auditory dataset

.. GENERATED FROM PYTHON SOURCE LINES 44-58

.. code-block:: default

    with SPMAuditoryTestingDataGrabber() as dg:
        # Get the first element
        element = dg.get_elements()[0]
        # Read the element
        element_data = DefaultDataReader().fit_transform(dg[element])
        # Initialize marker
        marker = ParcelAggregation(
            parcellation="Schaefer100x7", method="mean", on="BOLD"
        )
        # Compute feature
        feature = marker.fit_transform(element_data)
        # Print the output
        print(feature.keys())
        print(feature["BOLD"]["data"].shape)  # Shape is (timepoints x parcels)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2024-01-31 05:44:29,866 - JUNIFER - INFO - Getting element sub001

    Dataset created in /home/runner/nilearn_data/spm_auditory

    Data absent, downloading...
    Downloading data from https://www.fil.ion.ucl.ac.uk/spm/download/data/MoAEpilot/MoAEpilot.zip ...
    Downloaded 3096576 of 34212021 bytes (9.1%,   10.6s remaining)    Downloaded 7626752 of 34212021 bytes (22.3%,    7.4s remaining)    Downloaded 10657792 of 34212021 bytes (31.2%,    6.9s remaining)    Downloaded 13623296 of 34212021 bytes (39.8%,    6.3s remaining)    Downloaded 16924672 of 34212021 bytes (49.5%,    5.3s remaining)    Downloaded 19546112 of 34212021 bytes (57.1%,    4.6s remaining)    Downloaded 21864448 of 34212021 bytes (63.9%,    4.1s remaining)    Downloaded 23863296 of 34212021 bytes (69.8%,    3.5s remaining)    Downloaded 26140672 of 34212021 bytes (76.4%,    2.8s remaining)    Downloaded 28319744 of 34212021 bytes (82.8%,    2.1s remaining)    Downloaded 30654464 of 34212021 bytes (89.6%,    1.3s remaining)    Downloaded 32833536 of 34212021 bytes (96.0%,    0.5s remaining) ...done. (14 seconds, 0 min)
    Extracting data from /home/runner/nilearn_data/spm_auditory/sub001/MoAEpilot.zip..... done.
    2024-01-31 05:44:47,154 - JUNIFER - INFO - Reading BOLD from /tmp/tmpjkyl2j83/sub001_bold.nii.gz
    2024-01-31 05:44:47,154 - JUNIFER - INFO - BOLD is type NIFTI
    2024-01-31 05:44:47,155 - JUNIFER - INFO - Reading T1w from /tmp/tmpjkyl2j83/sub001_T1w.nii.gz
    2024-01-31 05:44:47,155 - JUNIFER - INFO - T1w is type NIFTI
    2024-01-31 05:44:47,156 - JUNIFER - INFO - Computing BOLD
    2024-01-31 05:44:47,156 - JUNIFER - INFO - Fetching one of Schaefer parcellations.
    2024-01-31 05:44:47,156 - JUNIFER - INFO - Parcellation parameters:
    2024-01-31 05:44:47,156 - JUNIFER - INFO -      resolution: 3.0
    2024-01-31 05:44:47,156 - JUNIFER - INFO -      n_rois: 100
    2024-01-31 05:44:47,156 - JUNIFER - INFO -      yeo_networks: 7
    2024-01-31 05:44:47,158 - JUNIFER - INFO - Loading parcellation /home/runner/junifer/data/parcellations/schaefer_2018/Schaefer2018_100Parcels_7Networks_order_FSLMNI152_2mm.nii.gz
    2024-01-31 05:44:49,599 - JUNIFER - INFO - No storage specified, returning dictionary
    dict_keys(['BOLD'])
    (96, 100)





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 20.605 seconds)


.. _sphx_glr_download_auto_examples_run_compute_parcel_mean.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: run_compute_parcel_mean.py <run_compute_parcel_mean.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: run_compute_parcel_mean.ipynb <run_compute_parcel_mean.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
