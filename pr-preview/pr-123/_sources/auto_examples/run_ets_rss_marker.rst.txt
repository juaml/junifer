
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/run_ets_rss_marker.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_run_ets_rss_marker.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_run_ets_rss_marker.py:


Extracting root sum of squares from edge-wise timeseries.
=========================================================
This example uses a ``RSSETSMarker`` to compute root sum of squares
of the edge-wise timeseries using the Schaefer parcellation
(100 rois and 200 rois, 17 Yeo networks) for a 4D nifti BOLD file.

Authors: Leonard Sasse, Sami Hamdan, Nicolas Nieto, Synchon Mandal

License: BSD 3 clause

.. GENERATED FROM PYTHON SOURCE LINES 14-23

.. code-block:: default


    import tempfile

    import junifer.testing.registry  # noqa: F401
    from junifer.api import collect, run
    from junifer.storage import SQLiteFeatureStorage
    from junifer.utils import configure_logging









.. GENERATED FROM PYTHON SOURCE LINES 24-25

Set the logging level to info to see extra information:

.. GENERATED FROM PYTHON SOURCE LINES 25-27

.. code-block:: default

    configure_logging(level="INFO")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2022-11-10 10:21:57,624 - JUNIFER - INFO - ===== Lib Versions =====
    2022-11-10 10:21:57,625 - JUNIFER - INFO - numpy: 1.23.4
    2022-11-10 10:21:57,625 - JUNIFER - INFO - scipy: 1.9.3
    2022-11-10 10:21:57,625 - JUNIFER - INFO - pandas: 1.5.1
    2022-11-10 10:21:57,625 - JUNIFER - INFO - nilearn: 0.9.2
    2022-11-10 10:21:57,625 - JUNIFER - INFO - nibabel: 4.0.2
    2022-11-10 10:21:57,625 - JUNIFER - INFO - junifer: 0.0.1.dev1
    2022-11-10 10:21:57,625 - JUNIFER - INFO - ========================




.. GENERATED FROM PYTHON SOURCE LINES 28-29

Define the datagrabber interface

.. GENERATED FROM PYTHON SOURCE LINES 29-33

.. code-block:: default

    datagrabber = {
        "kind": "SPMAuditoryTestingDatagrabber",
    }








.. GENERATED FROM PYTHON SOURCE LINES 34-35

Define the markers interface

.. GENERATED FROM PYTHON SOURCE LINES 35-48

.. code-block:: default

    markers = [
        {
            "name": "Schaefer100x17_RSSETS",
            "kind": "RSSETSMarker",
            "parcellation": "Schaefer100x17",
        },
        {
            "name": "Schaefer200x17_RSSETS",
            "kind": "RSSETSMarker",
            "parcellation": "Schaefer200x17",
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 49-51

Create a temporary directory for junifer feature extraction:
At the end you can read the extracted data into a ``pandas.DataFrame``.

.. GENERATED FROM PYTHON SOURCE LINES 51-76

.. code-block:: default

    with tempfile.TemporaryDirectory() as tmpdir:
        # Define the storage interface
        storage = {
            "kind": "SQLiteFeatureStorage",
            "uri": f"{tmpdir}/test.db",
            "single_output": False,
        }
        # Run the defined junifer feature extraction pipeline
        run(
            workdir=tmpdir,
            datagrabber=datagrabber,
            markers=markers,
            storage=storage,
            elements=["sub001"],  # we calculate for one subject only
        )
        # Collect extracted features data
        collect(storage=storage)
        # Create storage object to read in extracted features
        db = SQLiteFeatureStorage(
            uri=storage["uri"],
            single_output=True,  # as we ran collect, we have single output now
        )
        # Read extracted features
        df_vbm = db.read_df(feature_name="BOLD_Schaefer100x17_RSSETS")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2022-11-10 10:21:57,627 - JUNIFER - INFO - Getting element sub001
    2022-11-10 10:22:00,972 - JUNIFER - INFO - Fitting pipeline
    2022-11-10 10:22:00,973 - JUNIFER - INFO - Reading BOLD from /tmp/tmpcwyrcyrm/sub001_bold.nii.gz
    2022-11-10 10:22:00,973 - JUNIFER - INFO - BOLD is type NIFTI
    2022-11-10 10:22:00,974 - JUNIFER - INFO - Reading T1w from /tmp/tmpcwyrcyrm/sub001_T1w.nii.gz
    2022-11-10 10:22:00,974 - JUNIFER - INFO - T1w is type NIFTI
    2022-11-10 10:22:00,975 - JUNIFER - INFO - Fitting marker Schaefer100x17_RSSETS
    2022-11-10 10:22:00,975 - JUNIFER - INFO - Computing BOLD
    2022-11-10 10:22:00,976 - JUNIFER - INFO - Fetching one of Schaefer parcellations.
    2022-11-10 10:22:00,976 - JUNIFER - INFO - Parcellatikon parameters:
    2022-11-10 10:22:00,976 - JUNIFER - INFO -      n_rois: 100
    2022-11-10 10:22:00,976 - JUNIFER - INFO -      yeo_networks: 17
    2022-11-10 10:22:00,976 - JUNIFER - INFO -      resolution: 3.0
    2022-11-10 10:22:00,976 - JUNIFER - INFO - At least one of the parcellation files are missing. Fetching using nilearn.
    Downloading data from https://raw.githubusercontent.com/ThomasYeoLab/CBIG/v0.14.3-Update_Yeo2011_Schaefer2018_labelname/stable_projects/brain_parcellation/Schaefer2018_LocalGlobal/Parcellations/MNI/Schaefer2018_100Parcels_17Networks_order.txt ...
     ...done. (0 seconds, 0 min)
    Downloading data from https://raw.githubusercontent.com/ThomasYeoLab/CBIG/v0.14.3-Update_Yeo2011_Schaefer2018_labelname/stable_projects/brain_parcellation/Schaefer2018_LocalGlobal/Parcellations/MNI/Schaefer2018_100Parcels_17Networks_order_FSLMNI152_2mm.nii.gz ...
     ...done. (0 seconds, 0 min)
    2022-11-10 10:22:01,416 - JUNIFER - INFO - Loading parcellation /home/runner/junifer/data/parcellations/schaefer_2018/Schaefer2018_100Parcels_17Networks_order_FSLMNI152_2mm.nii.gz
    2022-11-10 10:22:06,424 - JUNIFER - INFO - Storing in <SQLiteFeatureStorage @ /tmp/tmp8jntirso/test.db (multiple output)>
    2022-11-10 10:22:06,455 - JUNIFER - INFO - Fitting marker Schaefer200x17_RSSETS
    2022-11-10 10:22:06,455 - JUNIFER - INFO - Computing BOLD
    2022-11-10 10:22:06,455 - JUNIFER - INFO - Fetching one of Schaefer parcellations.
    2022-11-10 10:22:06,456 - JUNIFER - INFO - Parcellatikon parameters:
    2022-11-10 10:22:06,456 - JUNIFER - INFO -      n_rois: 200
    2022-11-10 10:22:06,456 - JUNIFER - INFO -      yeo_networks: 17
    2022-11-10 10:22:06,456 - JUNIFER - INFO -      resolution: 3.0
    2022-11-10 10:22:06,456 - JUNIFER - INFO - At least one of the parcellation files are missing. Fetching using nilearn.
    Downloading data from https://raw.githubusercontent.com/ThomasYeoLab/CBIG/v0.14.3-Update_Yeo2011_Schaefer2018_labelname/stable_projects/brain_parcellation/Schaefer2018_LocalGlobal/Parcellations/MNI/Schaefer2018_200Parcels_17Networks_order.txt ...
     ...done. (0 seconds, 0 min)
    Downloading data from https://raw.githubusercontent.com/ThomasYeoLab/CBIG/v0.14.3-Update_Yeo2011_Schaefer2018_labelname/stable_projects/brain_parcellation/Schaefer2018_LocalGlobal/Parcellations/MNI/Schaefer2018_200Parcels_17Networks_order_FSLMNI152_2mm.nii.gz ...
     ...done. (0 seconds, 0 min)
    2022-11-10 10:22:06,801 - JUNIFER - INFO - Loading parcellation /home/runner/junifer/data/parcellations/schaefer_2018/Schaefer2018_200Parcels_17Networks_order_FSLMNI152_2mm.nii.gz
    2022-11-10 10:22:10,724 - JUNIFER - INFO - Storing in <SQLiteFeatureStorage @ /tmp/tmp8jntirso/test.db (multiple output)>
    2022-11-10 10:22:10,762 - JUNIFER - INFO - Marker collection fitting done
    2022-11-10 10:22:10,762 - JUNIFER - INFO - Collecting data using SQLiteFeatureStorage
    2022-11-10 10:22:10,763 - JUNIFER - INFO - Collecting data from /tmp/tmp8jntirso/*test.db
    file: 0it [00:00, ?it/s]
    feature:   0%|          | 0/2 [00:00<?, ?it/s]    feature: 100%|##########| 2/2 [00:00<00:00, 43.69it/s]
    file: 1it [00:00, 15.14it/s]
    2022-11-10 10:22:10,830 - JUNIFER - INFO - Collect done




.. GENERATED FROM PYTHON SOURCE LINES 77-78

Now we take a look at the dataframe

.. GENERATED FROM PYTHON SOURCE LINES 78-79

.. code-block:: default

    df_vbm.head()





.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th></th>
          <th>root_sum_of_squares_ets</th>
        </tr>
        <tr>
          <th>subject</th>
          <th>timepoint</th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th rowspan="5" valign="top">sub001</th>
          <th>0</th>
          <td>1439.862751</td>
        </tr>
        <tr>
          <th>1</th>
          <td>79.140510</td>
        </tr>
        <tr>
          <th>2</th>
          <td>46.187470</td>
        </tr>
        <tr>
          <th>3</th>
          <td>72.499142</td>
        </tr>
        <tr>
          <th>4</th>
          <td>49.109437</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  13.231 seconds)


.. _sphx_glr_download_auto_examples_run_ets_rss_marker.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: run_ets_rss_marker.py <run_ets_rss_marker.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: run_ets_rss_marker.ipynb <run_ets_rss_marker.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
